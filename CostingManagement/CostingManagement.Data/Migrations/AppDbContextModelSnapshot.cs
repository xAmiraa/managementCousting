// <auto-generated />
using System;
using CostingManagement.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CostingManagement.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("ReceivingReportId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Invoices", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoiceCosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CIFBridgeTown")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FOBValueBDS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FOBValueExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FOBValueForeignCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HandlingOtherChargesBDS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HandlingOtherChargesExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HandlingOtherChargesForeignCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InlandFreight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceBDS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceForeignCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LandedCostFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OceanAirFreightBDS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OceanAirFreightExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OceanAirFreightForeignCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherCurrentShipment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherPreviousShipmentRR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubTotalA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostBDSBeforeVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDutiesTaxesExclusiveVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VATId")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VATId");

                    b.ToTable("InvoiceCostings", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoiceDiscrepancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscrepancyStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Measurement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DiscrepancyStatusId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InvoiceDiscrepancies", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("PackageNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InvoicePackages", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrnReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueueNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RRNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingReportStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReceivingReportStatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReceivingReports", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Suppliers", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.SupportingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReceivingReportId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SupportingDocuments", "Costing");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.DiscrepancyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiscrepancyStatuses", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTypes", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageTypes", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.ReceivingReportStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceivingReportStatuses", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.VAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("VATs", "Lookup");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Security");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SubscriptionSchema.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LocalAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Subscriptions", "Subscription");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Invoice", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.ReceivingReport", "ReceivingReport")
                        .WithMany("Invoices")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("InvoiceType");

                    b.Navigation("ReceivingReport");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoiceCosting", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.VAT", "VAT")
                        .WithMany("InvoiceCostings")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Invoice");

                    b.Navigation("Updator");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoiceDiscrepancy", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.DiscrepancyStatus", "DiscrepancyStatus")
                        .WithMany("InvoiceDiscrepancies")
                        .HasForeignKey("DiscrepancyStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.Invoice", "Invoice")
                        .WithMany("InvoiceDiscrepancies")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.MeasurementUnit", "MeasurementUnit")
                        .WithMany("InvoiceDiscrepancies")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("DiscrepancyStatus");

                    b.Navigation("Invoice");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.InvoicePackage", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.Invoice", "Invoice")
                        .WithMany("InvoicePackages")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.MeasurementUnit", "MeasurementUnit")
                        .WithMany("InvoicePackages")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.PackageType", "PackageType")
                        .WithMany("InvoicePackages")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Invoice");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("PackageType");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.ReceivingReport", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.LookupSchema.ReceivingReportStatus", "ReceivingReportStatus")
                        .WithMany("ReceivingReports")
                        .HasForeignKey("ReceivingReportStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.Supplier", "Supplier")
                        .WithMany("ReceivingReports")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("ReceivingReportStatus");

                    b.Navigation("Supplier");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Supplier", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.SupportingDocument", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.CostingSchema.ReceivingReport", "ReceivingReport")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("ReceivingReport");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.VAT", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRoleClaim", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserClaim", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserLogin", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserRole", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUserToken", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SubscriptionSchema.Subscription", b =>
                {
                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Invoice", b =>
                {
                    b.Navigation("InvoiceDiscrepancies");

                    b.Navigation("InvoicePackages");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.ReceivingReport", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.CostingSchema.Supplier", b =>
                {
                    b.Navigation("ReceivingReports");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.DiscrepancyStatus", b =>
                {
                    b.Navigation("InvoiceDiscrepancies");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.InvoiceType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.MeasurementUnit", b =>
                {
                    b.Navigation("InvoiceDiscrepancies");

                    b.Navigation("InvoicePackages");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.PackageType", b =>
                {
                    b.Navigation("InvoicePackages");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.ReceivingReportStatus", b =>
                {
                    b.Navigation("ReceivingReports");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.LookupSchema.VAT", b =>
                {
                    b.Navigation("InvoiceCostings");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CostingManagement.Data.DbModels.SecuritySchema.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
